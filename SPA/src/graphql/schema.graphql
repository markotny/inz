# source: http://localhost/api/graphql
# timestamp: Fri Nov 08 2019 10:20:58 GMT+0100 (GMT+01:00)

"""The cost directives is used to express the complexity of a field."""
directive @cost(
  """Defines the complexity of the field."""
  complexity: Int! = 1

  """Defines field arguments that act as complexity multipliers."""
  multipliers: [MultiplierPath!]
) on FIELD_DEFINITION

directive @authorize(
  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access to the annotated resource."""
  roles: [String!]
) on OBJECT | FIELD_DEFINITION

type Album {
  albumArtist: Artist!
  averageRating: Float
  coverSrc: String
  id: ID!
  ratings: [Rating!]!
  releaseDate: DateTime
  songs: [Song!]!
  title: String!
}

input AlbumInput {
  albumArtist: ArtistInput
  albumArtistId: ID
  averageRating: Float
  coverSrc: String
  id: ID
  ratings: [RatingInput]
  releaseDate: DateTime
  songs: [SongInput]
  title: String!
}

type Artist {
  albums: [Album!]!
  id: ID!
  name: String!
  songs: [Song!]!
}

input ArtistInput {
  albums: [AlbumInput]
  id: ID
  name: String!
  songs: [SongInput]
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

"""
The multiplier path scalar represents a valid GraphQL multiplier path string.
"""
scalar MultiplierPath

type Mutation {
  addAlbum(album: AlbumInput!): Album!
  addArtist(artist: ArtistInput!): Artist!
  addSong(song: SongInput!): Song!
  updateAlbum(album: AlbumInput!): Album
}

type Query {
  album(id: ID!): Album
  albums: [Album!]!
  artist(id: ID!): Artist
  song(id: ID!): Song
}

type Rating {
  album: Album!
  id: ID!
  review: Review
  stars: Short!
  user: User!
}

input RatingInput {
  album: AlbumInput
  id: ID
  review: ReviewInput
  stars: Short!
  user: UserInput
}

type Review {
  id: ID!
  rating: Rating!
  reviewContent: String!
}

input ReviewInput {
  id: ID
  rating: RatingInput
  reviewContent: String!
}

"""
The `Short` scalar type represents non-fractional signed whole 16-bit numeric
values. Short can represent values between -(2^15) and 2^15 - 1.
"""
scalar Short

type Song {
  album: Album!
  artist: Artist!
  id: ID!
  length: Int
  title: String!
  trackNumber: Int
}

input SongInput {
  album: AlbumInput
  albumId: ID
  artist: ArtistInput
  artistId: ID!
  id: ID
  length: Int
  title: String!
  trackNumber: Int
}

type User {
  id: ID!
  ratings: [Rating!]!
  username: String!
}

input UserInput {
  id: ID
  ratings: [RatingInput]
  username: String!
}
